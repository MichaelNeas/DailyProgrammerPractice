/*
* The captcha requires you to review a sequence of digits (your puzzle input) and 
* find the sum of all digits that match the next digit in the list. The list is circular, 
* so the digit after the last digit is the first digit in the list.
* 1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the second digit and the third digit (2) matches the fourth digit.
* 1111 produces 4 because each digit (all 1) matches the next.
* 1234 produces 0 because no digit matches the next.
* 91212129 produces 9 because the only digit that matches the next one is the last digit, 9.
*/
const assert = require('assert');
// const {BigNumber} = require('bignumber.js');
// const bigInt = require('big-integer');

const test1 = 1122;
const test2 = 1111;
const test3 = 1234;
const test4 = 91212129;

const finalSequence
// const x = new BigNumber(finalSequence)
// const y = new BigNumber(Number.MAX_SAFE_INTEGER+1)
// const z = bigInt(finalSequence)
// console.log(y.toString())
// console.log(x.toString())
// console.log(z)



const getDigit = (number, n) => Math.floor(number / Math.pow(10, getDigitCount(number)-1-n)) % 10;
const getDigitCount = number => Math.max(Math.floor(Math.log10(Math.abs(number))), 0) + 1;

//cant handle a number that big
const captchaResponse = input => {
    const hrstart = process.hrtime();
    const sizeOfSequence = getDigitCount(input);
    let sum = 0;
    for(let i = 0; i < sizeOfSequence-1; i++){
        let currentDigit = getDigit(input, i); 
        if(currentDigit === getDigit(input, i+1))
            sum += currentDigit;
    }
    if(getDigit(input, sizeOfSequence-1) === getDigit(input, 0))
        sum += getDigit(input, sizeOfSequence-1);

    const hrend = process.hrtime(hrstart);
    console.info("Execution time (hr): %ds %dms", hrend[0], hrend[1]/1000000);
    return sum;
}

const implicitCaptchaResponse = input => {
    let stringInput = ''+input; //INFINITY HAHAHAHHAH for super large nums
    const hrstart = process.hrtime();
    const sizeOfSequence = stringInput.length;
    let sum = 0;
    for(let i = 0; i < sizeOfSequence-1; i++){
        let currentDigit = stringInput.charAt(i);
        if(currentDigit === stringInput.charAt(i + 1))
            sum += Number(currentDigit);
    }
    if(stringInput.charAt(sizeOfSequence - 1) === stringInput.charAt(0))
        sum += Number(stringInput.charAt(sizeOfSequence - 1));

    const hrend = process.hrtime(hrstart);
    console.info("Execution time (hr): %ds %dms", hrend[0], hrend[1]/1000000);
    return sum;
}

(function forcedStringCaptchaResponse(){
    console.log(implicitCaptchaResponse
})()


assert.equal(captchaResponse(test1), 3, 'First test off, 1+2 should be 3');
assert.equal(captchaResponse(test2), 4, 'First test off, 1+1+1+1 should be 4');
assert.equal(captchaResponse(test3), 0, 'First test off, 1234 should be 0');
assert.equal(captchaResponse(test4), 9, 'First test off, 91212129 should be 9');

assert.equal(implicitCaptchaResponse(test1), 3, 'First test off, 1+2 should be 3');
assert.equal(implicitCaptchaResponse(test2), 4, 'First test off, 1+1+1+1 should be 4');
assert.equal(implicitCaptchaResponse(test3), 0, 'First test off, 1234 should be 0');
assert.equal(implicitCaptchaResponse(test4), 9, 'First test off, 91212129 should be 9');

//console.info(`Final form answer is ${captchaResponse(finalSequence)}`);